---
apiVersion: v1
kind: Namespace
metadata:
  name: sock-shop

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sock-shop
  namespace: {{ namespace }}
  labels:
    component: sock-shop
---
kind: SecurityContextConstraints
apiVersion: v1
metadata:
  name: sock-shop
readOnlyRootFilesystem: true
allowPrivilegedContainer: true
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
volumes:
- '*'
users:
- system:admin
- system:serviceaccount:sock-shop:sock-shop
requiredDropCapabilities:
- all
defaultAddCapabilities:
- CHOWN
- SETGID
- SETUID
- NET_BIND_SERVICE
- DAC_OVERRIDE
---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: carts-db
{% endif %}
  template:
    metadata:
      labels:
        name: carts-db
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: carts-db
        image: quay.io/openshifttest/mongo:latest
        ports:
        - name: mongo
          containerPort: 27017
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db
          name: carts-data-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
        - name: carts-data-volume
          persistentVolumeClaim:
            claimName: carts-data-volume-claim
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: carts-data-volume-claim
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
{% if src_storage_class is defined  %}
  storageClassName: {{ src_storage_class | quote }}
{% endif %}
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: {{ namespace }}
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    name: carts-db
---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: carts
  labels:
    name: carts
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: carts
{% endif %}
  template:
    metadata:
      labels:
        name: carts
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: carts
        image: quay.io/openshifttest/carts:0.4.8
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 300m
            memory: 500Mi
        ports:
        - containerPort: 80
        # securityContext:
        #   runAsNonRoot: true
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    name: carts
  namespace: {{ namespace }}
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: carts

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalogue-db-config
  namespace: {{ namespace }}
data:
  dump.sql: "CREATE TABLE IF NOT EXISTS sock (\n\tsock_id
    varchar(40) NOT NULL, \n\tname varchar(20), \n\tdescription varchar(200), \n\tprice
    float, \n\tcount int, \n\timage_url_1 varchar(40), \n\timage_url_2 varchar(40),
    \n\tPRIMARY KEY(sock_id)\n);\n\nCREATE TABLE IF NOT EXISTS tag (\n\ttag_id MEDIUMINT
    NOT NULL AUTO_INCREMENT, \n\tname varchar(20), \n\tPRIMARY KEY(tag_id)\n);\n\nCREATE
    TABLE IF NOT EXISTS sock_tag (\n\tsock_id varchar(40), \n\ttag_id MEDIUMINT NOT
    NULL, \n\tFOREIGN KEY (sock_id) \n\t\tREFERENCES sock(sock_id), \n\tFOREIGN KEY(tag_id)\n\t\tREFERENCES
    tag(tag_id)\n);\n\nINSERT INTO sock VALUES (\"6d62d909-f957-430e-8689-b5129c0bb75e\",
    \"Weave special\", \"Limited issue Weave socks.\", 17.15, 33, \"/catalogue/images/weave1.jpg\",
    \"/catalogue/images/weave2.jpg\");\nINSERT INTO sock VALUES (\"a0a4f044-b040-410d-8ead-4de0446aec7e\",
    \"Nerd leg\", \"For all those leg lovers out there. A perfect example of a swivel
    chair trained calf. Meticulously trained on a diet of sitting and Pina Coladas.
    Phwarr...\", 7.99, 115, \"/catalogue/images/bit_of_leg_1.jpeg\", \"/catalogue/images/bit_of_leg_2.jpeg\");\nINSERT
    INTO sock VALUES (\"808a2de1-1aaa-4c25-a9b9-6612e8f29a38\", \"Crossed\", \"A mature
    sock, crossed, with an air of nonchalance.\",  17.32, 738, \"/catalogue/images/cross_1.jpeg\",
    \"/catalogue/images/cross_2.jpeg\");\nINSERT INTO sock VALUES (\"510a0d7e-8e83-4193-b483-e27e09ddc34d\",
    \"SuperSport XL\", \"Ready for action. Engineers: be ready to smash that next
    bug! Be ready, with these super-action-sport-masterpieces. This particular engineer
    was chased away from the office with a stick.\",  15.00, 820, \"/catalogue/images/puma_1.jpeg\",
    \"/catalogue/images/puma_2.jpeg\");\nINSERT INTO sock VALUES (\"03fef6ac-1896-4ce8-bd69-b798f85c6e0b\",
    \"Holy\", \"Socks fit for a Messiah. You too can experience walking in water with
    these special edition beauties. Each hole is lovingly proggled to leave smooth
    edges. The only sock approved by a higher power.\",  99.99, 1, \"/catalogue/images/holy_1.jpeg\",
    \"/catalogue/images/holy_2.jpeg\");\nINSERT INTO sock VALUES (\"d3588630-ad8e-49df-bbd7-3167f7efb246\",
    \"YouTube.sock\", \"We were not paid to sell this sock. It's just a bit geeky.\",
    \ 10.99, 801, \"/catalogue/images/youtube_1.jpeg\", \"/catalogue/images/youtube_2.jpeg\");\nINSERT
    INTO sock VALUES (\"819e1fbf-8b7e-4f6d-811f-693534916a8b\", \"Figueroa\", \"enim
    officia aliqua excepteur esse deserunt quis aliquip nostrud anim\",  14, 808,
    \"/catalogue/images/WAT.jpg\", \"/catalogue/images/WAT2.jpg\");\nINSERT INTO sock
    VALUES (\"zzz4f044-b040-410d-8ead-4de0446aec7e\", \"Classic\", \"Keep it simple.\",
    \ 12, 127, \"/catalogue/images/classic.jpg\", \"/catalogue/images/classic2.jpg\");\nINSERT
    INTO sock VALUES (\"3395a43e-2d88-40de-b95f-e00e1502085b\", \"Colourful\", \"proident
    occaecat irure et excepteur labore minim nisi amet irure\",  18, 438, \"/catalogue/images/colourful_socks.jpg\",
    \"/catalogue/images/colourful_socks.jpg\");\nINSERT INTO sock VALUES (\"837ab141-399e-4c1f-9abc-bace40296bac\",
    \"Cat socks\", \"consequat amet cupidatat minim laborum tempor elit ex consequat
    in\",  15, 175, \"/catalogue/images/catsocks.jpg\", \"/catalogue/images/catsocks2.jpg\");\n\nINSERT
    INTO tag (name) VALUES (\"brown\");\nINSERT INTO tag (name) VALUES (\"geek\");\nINSERT
    INTO tag (name) VALUES (\"formal\");\nINSERT INTO tag (name) VALUES (\"blue\");\nINSERT
    INTO tag (name) VALUES (\"skin\");\nINSERT INTO tag (name) VALUES (\"red\");\nINSERT
    INTO tag (name) VALUES (\"action\");\nINSERT INTO tag (name) VALUES (\"sport\");\nINSERT
    INTO tag (name) VALUES (\"black\");\nINSERT INTO tag (name) VALUES (\"magic\");\nINSERT
    INTO tag (name) VALUES (\"green\");\n\nINSERT INTO sock_tag VALUES (\"6d62d909-f957-430e-8689-b5129c0bb75e\",
    \"2\");\nINSERT INTO sock_tag VALUES (\"6d62d909-f957-430e-8689-b5129c0bb75e\",
    \"9\");\nINSERT INTO sock_tag VALUES (\"a0a4f044-b040-410d-8ead-4de0446aec7e\",
    \"4\");\nINSERT INTO sock_tag VALUES (\"a0a4f044-b040-410d-8ead-4de0446aec7e\",
    \"5\");\nINSERT INTO sock_tag VALUES (\"808a2de1-1aaa-4c25-a9b9-6612e8f29a38\",
    \"4\");\nINSERT INTO sock_tag VALUES (\"808a2de1-1aaa-4c25-a9b9-6612e8f29a38\",
    \"6\");\nINSERT INTO sock_tag VALUES (\"808a2de1-1aaa-4c25-a9b9-6612e8f29a38\",
    \"7\");\nINSERT INTO sock_tag VALUES (\"808a2de1-1aaa-4c25-a9b9-6612e8f29a38\",
    \"3\");\nINSERT INTO sock_tag VALUES (\"510a0d7e-8e83-4193-b483-e27e09ddc34d\",
    \"8\");\nINSERT INTO sock_tag VALUES (\"510a0d7e-8e83-4193-b483-e27e09ddc34d\",
    \"9\");\nINSERT INTO sock_tag VALUES (\"510a0d7e-8e83-4193-b483-e27e09ddc34d\",
    \"3\");\nINSERT INTO sock_tag VALUES (\"03fef6ac-1896-4ce8-bd69-b798f85c6e0b\",
    \"10\");\nINSERT INTO sock_tag VALUES (\"03fef6ac-1896-4ce8-bd69-b798f85c6e0b\",
    \"7\");\nINSERT INTO sock_tag VALUES (\"d3588630-ad8e-49df-bbd7-3167f7efb246\",
    \"2\");\nINSERT INTO sock_tag VALUES (\"d3588630-ad8e-49df-bbd7-3167f7efb246\",
    \"3\");\nINSERT INTO sock_tag VALUES (\"819e1fbf-8b7e-4f6d-811f-693534916a8b\",
    \"3\");\nINSERT INTO sock_tag VALUES (\"819e1fbf-8b7e-4f6d-811f-693534916a8b\",
    \"11\");\nINSERT INTO sock_tag VALUES (\"819e1fbf-8b7e-4f6d-811f-693534916a8b\",
    \"4\");\nINSERT INTO sock_tag VALUES (\"zzz4f044-b040-410d-8ead-4de0446aec7e\",
    \"1\");\nINSERT INTO sock_tag VALUES (\"zzz4f044-b040-410d-8ead-4de0446aec7e\",
    \"11\");\nINSERT INTO sock_tag VALUES (\"3395a43e-2d88-40de-b95f-e00e1502085b\",
    \"1\");\nINSERT INTO sock_tag VALUES (\"3395a43e-2d88-40de-b95f-e00e1502085b\",
    \"4\");\nINSERT INTO sock_tag VALUES (\"837ab141-399e-4c1f-9abc-bace40296bac\",
    \"1\");\nINSERT INTO sock_tag VALUES (\"837ab141-399e-4c1f-9abc-bace40296bac\",
    \"11\");\nINSERT INTO sock_tag VALUES (\"837ab141-399e-4c1f-9abc-bace40296bac\",
    \"3\");\n\n\n\n\n"

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: 'true'
  name: catalogue-db
  namespace: {{ namespace }}
spec:
  replicas: 1
  selector:
    name: catalogue-db
  strategy:
    type: Recreate
    recreateParams:
      post:
        failurePolicy: ignore
        execNewPod:
          volumes:
            - catalogue-db-init-volume
          containerName: catalogue-db
          command:
          - /bin/sh
          - -c
          - hostname && sleep 60 && /opt/rh/rh-mysql57/root/usr/bin/mysql --force -h $CATALOGUE_DB_SERVICE_HOST -u $MYSQL_USER -D $MYSQL_DATABASE -p$MYSQL_PASSWORD -P 3306 < /mysql-init/dump.sql
  template:
    metadata:
      labels:
        name: catalogue-db
    spec:
      containers:
      - env:
        - name: MYSQL_USER
          value: catalogue_user
        - name: MYSQL_PASSWORD
          value: default_password
        - name: MYSQL_DATABASE
          value: socksdb
        image: "quay.io/openshifttest/mysql:{{ mysql_version }}"
        imagepullpolicy: always
        name: catalogue-db
        ports:
        - containerPort: 3306
        resources:
          limits:
            memory: 512Mi
        volumeMounts:
        - mountPath: "/var/lib/mysql/data"
          name: catalogue-db-data-volume
        - mountPath: "/mysql-init"
          name: catalogue-db-init-volume
      volumes:
      - name: catalogue-db-data-volume
        persistentVolumeClaim:
          claimName: catalogue-data-volume-claim
      - name: catalogue-db-init-volume
        configMap:
          name: catalogue-db-config
  triggers:
  - type: ConfigChange
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: catalogue-data-volume-claim
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
{% if src_storage_class is defined  %}
  storageClassName: {{ src_storage_class | quote }}
{% endif %}
  resources:
    requests:
      storage: 10Gi


---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
  namespace: {{ namespace }}
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    name: catalogue-db

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: catalogue
{% endif %}
  template:
    metadata:
      labels:
        name: catalogue
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: catalogue
        image: quay.io/openshifttest/catalogue:0.3.5
        command: ["/app"]
        args:
        - -port=80
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: {{ namespace }}
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: catalogue

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: front-end
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: front-end
{% endif %}
  template:
    metadata:
      labels:
        name: front-end
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: front-end
        image: quay.io/openshifttest/front-end:0.3.12
        resources:
          limits:
            cpu: 300m
            memory: 1000Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 8079
        env:
        - name: SESSION_REDIS
          value: "true"
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #   readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Route
metadata:
  name: front-end
  namespace: {{ namespace }}
spec:
  path: "/" 
  port:
    targetPort: 8079
  to:
    kind: Service
    name: front-end

---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  labels:
    name: front-end
  namespace: {{ namespace }}
spec:
  ports:
  - port: 80
    targetPort: 8079
  selector:
    name: front-end

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: orders-db
{% endif %}
  template:
    metadata:
      labels:
        name: orders-db
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: orders-db
        image: quay.io/openshifttest/mongo:latest
        ports:
        - name: mongo
          containerPort: 27017
        # securityContext:
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - CHOWN
        #       - SETGID
        #       - SETUID
        #   readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db
          name: orders-data-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
        - name: orders-data-volume
          persistentVolumeClaim:
            claimName: orders-data-volume-claim
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: orders-data-volume-claim
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
{% if src_storage_class is defined  %}
  storageClassName: {{ src_storage_class | quote }}
{% endif %}
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: {{ namespace }}
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    name: orders-db

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: orders
  labels:
    name: orders
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: orders
{% endif %}
  template:
    metadata:
      labels:
        name: orders
    spec:
      serviceAccountName: sock-shop      
      containers:
      - name: orders
        image: quay.io/openshifttest/orders:0.4.7
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 500Mi
        ports:
        - containerPort: 80
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    name: orders
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: orders

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: payment
  labels:
    name: payment
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: payment
{% endif %}
  template:
    metadata:
      labels:
        name: payment
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: payment
        image: quay.io/openshifttest/payment:0.4.3
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 99m
            memory: 100Mi
        ports:
        - containerPort: 80
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    name: payment
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: payment

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: queue-master
  labels:
    name: queue-master
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: queue-master
{% endif %}
  template:
    metadata:
      labels:
        name: queue-master
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: queue-master
        image: quay.io/openshifttest/queue-master:0.3.1
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 300m
            memory: 500Mi
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  labels:
    name: queue-master
  annotations:
    prometheus.io/path: "/prometheus"
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: queue-master

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: rabbitmq
{% endif %}
  template:
    metadata:
      labels:
        name: rabbitmq
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: rabbitmq
        image: quay.io/openshifttest/rabbitmq:3.6.8-management
        ports:
        - containerPort: 15672
          name: management
        - containerPort: 5672
          name: rabbitmq
        # securityContext:
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - CHOWN
        #       - SETGID
        #       - SETUID
        #       - DAC_OVERRIDE
        #   readOnlyRootFilesystem: true
      - name: rabbitmq-exporter
        image: quay.io/openshifttest/rabbitmq-exporter:latest
        ports:
        - containerPort: 9090
          name: exporter
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 5672
    name: rabbitmq
    targetPort: 5672
  - port: 9090
    name: exporter
    targetPort: exporter
    protocol: TCP
  selector:
    name: rabbitmq

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: session-db
  labels:
    name: session-db
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: session-db
{% endif %}
  template:
    metadata:
      labels:
        name: session-db
      annotations:
        prometheus.io.scrape: "false"
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: session-db
        image: quay.io/openshifttest/redis_alpine:latest
        ports:
        - name: redis
          containerPort: 6379
        # securityContext:
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - CHOWN
        #       - SETGID
        #       - SETUID
        #   readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: session-db
  labels:
    name: session-db
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 6379
    targetPort: 6379
  selector:
    name: session-db

---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: shipping
{% endif %}
  template:
    metadata:
      labels:
        name: shipping
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: shipping
        image: quay.io/openshifttest/shipping:0.4.8
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 300m
            memory: 500Mi
        ports:
        - containerPort: 80
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: shipping


---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: user-db
{% endif %}
  template:
    metadata:
      labels:
        name: user-db
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: user-db
        image: quay.io/openshifttest/user-db:0.3.0
        ports:
        - name: mongo
          containerPort: 27017  
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db-users
          name: user-data-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
        - name: user-data-volume
          persistentVolumeClaim:
            claimName: user-data-volume-claim
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-data-volume-claim
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
{% if src_storage_class is defined  %}
  storageClassName: {{ src_storage_class | quote }}
{% endif %}
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: user-db


---
apiVersion: {{ deployment_api }}
kind: Deployment
metadata:
  name: user
  labels:
    name: user
  namespace: {{ namespace }}
spec:
  replicas: 1
{% if deployment_api == 'apps/v1' %}
  selector:
    matchLabels:
      name: user
{% endif %}
  template:
    metadata:
      labels:
        name: user
    spec:
      serviceAccountName: sock-shop
      containers:
      - name: user
        image: quay.io/openshifttest/user:0.4.7
        resources:
          limits:
            cpu: 300m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        env:
        - name: mongo
          value: user-db:27017
        # securityContext:
        #   runAsNonRoot: true
        #   runAsUser: 10001
        #   capabilities:
        #     drop:
        #       - all
        #     add:
        #       - NET_BIND_SERVICE
        #   readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: user
  labels:
    name: user
  namespace: {{ namespace }}
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: user


